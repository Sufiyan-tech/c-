class Solution {
public:
    vector<char> strToVec(string & str){
        vector<char> vec; 
        for(int i = 0 ; i < str.length() ; i++){
            vec.push_back(str[i]);
        }
        return vec;
    }
    
    bool checkOnlySpecific(vector<char> & vec, char chr){
        for(int i = 0 ; i < vec.size() ; i++){
            if(vec[i] != chr){
                return false;
            }
        }
        return true;
    }
    
    bool containAsterisk(vector<char> & string_p, int index , int direction){
        if(direction == 1){
            if(index == 0){
                return false;
            }else{
                for(int i = 0 ; i < index ; i++){
                    if(string_p[i] != '*'){
                        return false;
                    }
                }
            }
        }else{
            if((index+1) == string_p.size()){
                return false;
            }else{
                for(int i = index+1 ; i < string_p.size() ; i++){
                    if(string_p[i] != '*'){
                        return false;
                    }
                }    
            }
            
        }
        return true;
    }
    
    
    bool isMatch(string s, string p) {
        vector<char> string_s = strToVec(s);
        vector<char> string_p = strToVec(p);
        
        if(checkOnlySpecific(string_p , '*') == 1){
            return true;
        }else{
            int left_index_s = 0;
            int left_index_p = 0;
            int right_index_s = string_s.size()-1;
            int right_index_p = string_p.size()-1;
            
            // while(true){
                // Left Index
                
                
            // }
            
            return false;   
        }
        
        return true;
    }
};