// Brute Force Approach 

int max = 0;
        
        
         for(int i = 0 ; i  height.size() ; i++){
             for(int j = 0; j  height.size() ; j++){
                 int distance = i-j;
                 int val = 0;
                 if(distance  0){
                     distance = distance  (-1);
                 }
                
                 if(height[i]  height[j]){
                     val = height[i]  distance;
                 }else if(height[j]  height[i]){
                     val = height[j]  distance;
                 }else{
                     val = height[i]  distance;
                 }
                
                 if(val  max){
                     max = val;
                 }
             }
         }
                
         return max;


// Two Pointer Approach

class Solution {
public:
    int maxArea(vector<int>& height) {
        int left_index = 0;
        int right_index = height.size()-1;
        int vol = 0;
        
        while(left_index != right_index){
            int distance = right_index - left_index;
            if(distance < 0){
                distance = distance * (-1);
            }
            
            int current_vol = min(height[left_index] , height[right_index]) * distance;
            
            if(current_vol > vol){
                vol = current_vol;
            }
            
            if(height[left_index] < height[right_index]){
                left_index++;
            }else{
                right_index--;
            }
            
        }
        
        return vol;
    }
};