class Solution {
public:
    
    vector<int> recurseVectorCreation(vector<int>& nums , vector<int>& answers , int& index){
        if(index >= (nums.size())){
            return answers;
        }
        
        vector<int> prefix_product;
        vector<int> suffix_product;
        int product;
        
        if(index == 0){
            suffix_product.assign(nums.begin()+(index+1) , nums.end());
        }
        else if(index == (nums.size()-1)){
            prefix_product.assign(nums.rbegin()+1 , nums.rend());
        }
        
        answers.push_back(nums[index]);
        index++;
        recurseVectorCreation(nums , answers , index);
        return answers;
    }    
    
    vector<int> productExceptSelf(vector<int>& nums) {
        int index = 0;
        vector<int> answers;
        for(int a : recurseVectorCreation(nums , answers , index)){
            cout << a;
        }
        return answers;
    }
};