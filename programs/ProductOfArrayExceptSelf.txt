class Solution {
public:
   
    vector<int> answers;
    
    void recurseVectorCreation(vector<int> nums , int index){
        if(index >= (nums.size())){
            return;
        }

        int product;
        int prefix_product;
        int suffix_product;
        
        if(index == 0){
            prefix_product = 1;
            suffix_product = accumulate(nums.begin()+(index+1) , nums.end() , 1 , multiplies<int>());
        }
        else if(index == (nums.size()-1)){
            prefix_product = accumulate(nums.rbegin()+1 , nums.rend() , 1 , multiplies<int>());
            suffix_product = 1;
        }else{
            prefix_product = accumulate(nums.begin() , nums.end()-(nums.size()-index) , 1 , multiplies<int>());
            suffix_product = accumulate(nums.begin()+(index+1) , nums.end(), 1 , multiplies<int>());
        }
        
        int pro = prefix_product * suffix_product; 
        
        answers.push_back(pro);
        index++;
        recurseVectorCreation(nums , index);
        
    }    
    
    vector<int> productExceptSelf(vector<int>& nums) {
        int index = 0;
        int portion = nums.size()/1000;
        int start_pos = 0; 
        int end_pos = 1000;
        
        vector<int> v_por;
        for(int i = 0 ; i < portion ; i++){
            v_por.assign(nums.begin()+start_pos , nums.begin()+end_pos);
            recurseVectorCreation(v_por , index); 
            start_pos = end_pos;
            end_pos += 1000;
        }
        cout << answers.size() << endl;
        return answers;
    }
};